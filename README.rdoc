== Introduction
Freelancer API for ruby

   This api allow to call freelancer api from ruby code.
   It's can login to freelancer with "mechanize", using oauth library
   
   Main site:     http://github.com/b0c1/freelancer4r
   RDoc:          http://freelancer4r.javaportal.hu/
   Mailing list:  http://groups.google.com/group/freelancer4r 

== Installation

   gem install freelancer4r

== Detailed information
   
   Freelancer api implements two different api for different approach.
     * Full Freelancer.com API - with this you can do anything with freelancer, required oauth authentication
     * Freelancer.com Widget API - with this you can do minimal but not required oauth authentication
     
   Full freelancer API modules:
     * Freelancer::Common
     * Freelancer::Employer
     * Freelancer::FreelancersCall
     * Freelancer::Job
     * Freelancer::Message
     * Freelancer::Notification
     * Freelancer::Payment
     * Freelancer::Profile
     * Freelancer::Project
     * Freelancer::User
   
   Widget API modules:
     * Freelancer::Widget
     
   See modules documentation
   
== Usage

* Shortest way, to login (require mechanize gem)

   freelancer=Freelancer.new false,"application_token","application_secret","username","password"
   projects=freelancer.searchProjects

* Custom one step login (require mechanize gem)

   freelancer=Freelancer.new false
   freelancer.application_token=token
   freelancer.application_secret=secret
   freelancer.username=username
   freelancer.password=password

   freelancer.login
   freelancer.searchprojects

* Hand staged login (no username and password)

   freelancer=Freelancer.new false,"application_token","application_secret"
   freelancer.login_stage1
   authorize_url=freelancer.login_stage2
   #.... wait for user login and get the verifier key from user...
   freelancer.login_stage3
   freelancer.searchProjects

* Usage for web pages with callback (no username and password)

   freelancer=Freelancer.new false,"application_token","application_secret"
   freelancer.callback="http://example.com/callbackurl"
   freelancer.login_stage1
   authorize_url=freelancer.login_stage2
   #... redirect user to authorize url ...
   #... user come back to callback page ...
   freelancer.login_stage3
   freelancer.serchProjects

* Using widget api (very basic api with limitations, but not required authentication)
   
   widget=Freelancer.new_widget true
   widget.search :keyword=>"Ruby"
   